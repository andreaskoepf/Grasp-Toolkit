function [w,varargout] = frictionConeDiscretization(n,r,contact,varargin)
%FrictionConeDiscretization
%   [w]=FrictionConeDiscretization(n,r,contactType,friction,resolution,bodyframe)
%       Discretizes the friction cone for a given contact type with contact
%       normal "n" and contact location "r".  It returns an array of n x l
%       w where n depends on the dimensionality produced by the given
%       contact model and l depends on the resolution of the
%       discretized cone to the actual continuous cone.
%
%   Inputs:
%       n           :   3 x 1 vector representing Contact normal relative
%                       to the object body frame.
%       r           :   3 x 1 vector representing Contact location relative
%                       to the body frame.
%       contact     :   Contact model which will dictated the shape and
%                       dimensionality of the friction cone.  Enter one out
%                       of the four possible contact models:
%                       FPC      :   Frictionless point contact.
%                       PCF     :   Point contact with friction.
%                       SFCe    :   Elliptical soft finger contact.
%                       SFCl    :   Linear soft finger contact.
%
%       friction    :   (optional) Friction coefficient(s).
%       resolution:   (optional) 1 x d array indicating the parameters
%                       that are used to approximate the friction cone.
%                       The number of points in the discretized model
%                       depends on the type of contact represented by the
%                       cone. The possible values for the resolution are
%                           FPC     :   [];
%
%                           PCF     :   [J] where the resultant Wrench
%                               space is an array of 6 x J.
%
%                           SFCe    :   [J K] where the resultant Wrench
%                               space w is an array of 6 x 2*J*K-J+2.
%
%                           SFCl    :   [J K] where the resultant Wrench
%                               space w is an array of 6 x 2*J*K-J+2 and K
%                               is between 0 and 1.
%
%       bodyframe   :   (optional) 4 x 4 array corresponding to the body
%                       frame of reference. When not provided it defauts to
%                       eye(4).
%
%   Outputs
%       w           :   n x l array containing the primitive wrenches
%
%

switch nargin
    case 3
        friction=[0.5 0.5];
        resolution=[10 2];
        bodyframe=eye(4);
    case 4
        friction=varargin{1};
        resolution=[10 2];
        bodyframe=eye(4);
        
    case 5
        friction=varargin{1};
        resolution=varargin{2};
        bodyframe=eye(4);
    case 6
        friction=varargin{1};
        resolution=varargin{3};
        bodyframe=varargin{2};
        
        
    otherwise
        error('Wrong number of arguments')
        
end


% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Initializing
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% % extracting z axis of the object frame
% no=bodyframe(1:3,3);
%
% [theta,u]=Algorithms.EquivalentAngleAxis(no,n);
%
% % conputing contact frame of reference relative to the origin
% ContactFrame=Algorithms.aa2transform(u,theta);
%
% % retrieving tangent vectors of the contact frame
% n=ContactFrame(1:3,3);
% o=ContactFrame(1:3,1);
% t=ContactFrame(1:3,2);

% creating orthogonal frame
n=n/norm(n);

if any(n==1)
    
o=cross(n,[1 0 0]');
t=cross(n,o);

% computing contact position relative to the origin
rt=bodyframe\[r;1];
r=rt(1:3,1);

switch lower(contact)
    case lower('FPC')
        
        G=[n;cross(r,n)];
        
        % creating primitive wrench array
        w=G;
        
        % single vertex
        vertices=[1 0 0]';
        
    case lower('PCF')
        G=[n o t;cross(r,n) cross(r,o) cross(r,t)];
        
        % retreiving resolution parameters
        J=resolution(1);
        
        % retreiving friction coefficients,
        u=friction(1);
        
        % creating tau values
        tau=zeros(2,J);
        
        for j=1:J;
            tau(:,j)=[u*cos(2*j*pi/J);u*sin(2*j*pi/J)];
        end
        
        % creating s
        s=[ones(1,size(tau,2));tau];
        
        % creating primitive wrench array
        w=G*s;
        
        % cone vertices
        vertices=s';
        
        disp(G)
        
    case lower('SFCe')
        % GraspMatrix
        G=[n o t zeros(3,1);cross(r,n) cross(r,o) cross(r,t) n];
        
        % retreiving resolution parameters
        J=resolution(1);
        K=resolution(2);
        if(K<2)
            K=2;
        end
        
        % retreiving friction coefficients,
        u=friction(1);
        us=friction(2);
        
        % creating tau values
        tau=zeros(3,2*J*K-J+2);
        
        
        
        index=1;
        for k=-K:K;
            for j=1:J;
                tau(:,index)=[u*cos(2*j*pi/J)*cos(k*pi/(2*K));u*sin(2*j*pi/J)*cos(k*pi/(2*K));...
                    us*sin(k*pi/(2*K))];
                index=index+1;
                
                if(abs(k)==K)
                    break;
                end
            end
        end
        
        % creating s
        s=[ones(1,size(tau,2));tau];
        
        % creating primitive wrench array
        w=G*s;
        
        % cone vertices
        vertices=tau';
        
        
    case lower('SFCl')
        % GraspMatrix
        G=[n o t zeros(3,1);cross(r,n) cross(r,o) cross(r,t) n];
        
        % retreiving resolution parameters
        J=resolution(1);
        K=1;
        
        % retreiving friction coefficients,
        u=friction(1);
        us=friction(2);
        
        % creating tau values
        tau=zeros(3,2*J*K-J+2);
        
        index=1;
        for k=-K:K;
            for j=1:J;
                tau(:,index)=[u*cos(2*j*pi/J)*cos(k*pi/(2*K));u*sin(2*j*pi/J)*cos(k*pi/(2*K));...
                    us*sin(k*pi/(2*K))];
                index=index+1;
                
                if(abs(k)==K)
                    break;
                end
            end
        end
        
        % creating s
        s=[ones(1,size(tau,2));tau];
        
        % creating primitive wrench array
        w=G*s;
        
        % cone vertices
        vertices=tau';
        
        
    otherwise
        error([contact 'is not a valid contact model'])
end

switch nargout
    case 2
        faces=convhulln(vertices);
        patchdata.faces=faces;
        patchdata.vertices=vertices;
        patchdata.facecolor='y';
        varargout{1}=patchdata;
    case 3
        faces=convhulln(vertices);
        patchdata.faces=faces;
        patchdata.vertices=vertices;
        patchdata.facecolor='y';
        varargout{1}=patchdata;
        varargout{2}=s;
end

end