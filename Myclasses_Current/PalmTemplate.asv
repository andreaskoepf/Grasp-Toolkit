classdef PalmTemplate

    properties
        Nodes
        Type
        Style
        PalmDetails
        Gaps
        Color
    end

    methods
        function template=PalmTemplate(varargin)
            
            % PALM TEMPLATE
            %   CONSTRUCTOR 1
            %   template=PalmTemplate(fingers,thumb,style,xOffset,yOffset,)
            %
            %   
            %   CONSTRUCTOR 2
            %   template=PalmTemplate(scale,type,style)

            
            if isa(varargin{3},'numeric')
                fingers=varargin{1};
                thumb=varargin{2};
                style=varargin{3};
                xOffset=varargin{4};
                yOffset=varargin{5};

                switch ['template' num2str(style)]

                    case 'template1'

                        % Determining FileName
                        filePath=Toolkit.createToolkitPath('Palm',['Template' num2str(style)]);
                        %filePath=['Palm\Template' num2str(style) '\'];
                        
                        % obtaining default thumb compartment details
                        tcDetails=getDefaultThumbCompartment(thumb,style);
                        
                        
                        % alternative parts
                        tcAdjacent.MoveToOrigin=eye(4);
                        tcAdjacent.OriginalSize=[32 12 6];
                        tcAdjacent.FileName=Toolkit.createRelativePath(filePath,'tcAdjacent');
                        %tcAdjacent.FileName=[filePath 'tcAdjacent'];
                        
                        tcExtension.MoveToOrigin=eye(4);
                        tcExtension.OriginalSize=[3 12 6];
                        tcExtension.FileName=Toolkit.createRelativePath(filePath,'tcExtension');
                        
                        % finger support Defaults
                        fsDefaults.MoveToOrigin=eye(4);
                        fsDefaults.OriginalSize=[8 36 6];
                        fsDefaults.FileName=Toolkit.createRelativePath(filePath,'fSupport');
                        
                        % color
                        color=[0.5 0.5 0.5];
                        
                        
                    otherwise
                        error(['Style Template ' num2str(style) 'is not valid or has not been defined'])
                end
                
                
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                % Step 1    : Determine construction parameters           %
                % Relevant Variables:                                     %
                %           - xSpan                                       %
                %           - tcDetails: thumb compartment parameters     %
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

                % determinining xSpan
                xSpan=[xOffset(1)-fingers(1).Size(3)/2 xOffset(end)+fingers(end).Size(3)/2];
                
                

                % reconstructing xSpan and tcDetails (thumb compartment details)



                % --------------------- left side ----------------------- %
                if xSpan(1)>= -tcDetails(1).Dimensions(1)/2

                    xSpan(1)=-tcDetails(1).Dimensions(1)/2;

                    % no need to build left part
                    tcDetails(2)=[];

                    % reassigning the index of the structure that retains
                    % the details of the default right part
                    rightIndex=2;

                elseif xSpan(1)< -tcDetails(1).Dimensions(1)/2

                    dx=-tcDetails(1).Dimensions(1)/2-xSpan(1);
                    leftDim=tcDetails(2).Dimensions;

                    % preserving the index of the structure that
                    % retains the details of the default right part
                    rightIndex=3;

                    % extending structure array size
                    n=length(tcDetails)+1;

                    % case 1 : add left part and adjacent part
                    if dx>leftDim(1)

                        % adjacent part
                        tcDetails(n).Dimensions=abs(leftDim-[dx 0 0]);
                        tcDetails(n).FileName=tcAdjacent.FileName;
                        tcDetails(n).MoveToOrigin=tcAdjacent.MoveToOrigin;
                        tcDetails(n).Relocate=Solid.translate('x',xSpan(1)+tcDetails(n).Dimensions(1)/2);
                        tcDetails(n).OriginalSize=tcAdjacent.OriginalSize;

                        % case 2 : add extension part only intead of left part
                    elseif dx<leftDim(1)


                        tcDetails(2).Dimensions=abs([dx leftDim(2:end)]);
                        tcDetails(2).FileName=tcExtension.FileName;
                        tcDetails(2).MoveToOrigin=tcExtension.MoveToOrigin;
                        tcDetails(2).Relocate=Solid.translation('x',xSpan(1)+tcDetails(2).Dimensions(1)/2);
                        tcDetails(2).OriginalSize=tcExtension.OriginalSize;

                    end % case where dx == leftDim(1) does not need to be define since it is the
                    % default case
                end
                
                

                % --------------------- right side ---------------------- %
                if xSpan(2)<= tcDetails(1).Dimensions(1)/2

                    xSpan(2)=tcDetails(1).Dimensions(1)/2;

                    % no need to build right part
                    tcDetails(rightIndex)=[];

                elseif xSpan(2)> tcDetails(1).Dimensions(1)/2

                    dx=xSpan(2)-tcDetails(1).Dimensions(1)/2;
                    rightDim=tcDetails(rightIndex).Dimensions;

                    % extending structure array size
                    n=length(tcDetails)+1;

                    % case 1 : add right part and adjacent part
                    if dx>rightDim(1)

                        % adjacent part
                        tcDetails(n).Dimensions=abs(rightDim-[dx 0 0]);
                        tcDetails(n).FileName=tcAdjacent.FileName;
                        tcDetails(n).MoveToOrigin=tcAdjacent.MoveToOrigin;
                        tcDetails(n).Relocate=Solid.translation('x',xSpan(2)-tcDetails(n).Dimensions(1)/2);
                        tcDetails(n).OriginalSize=tcAdjacent.OriginalSize;

                        % case 2 : add extension part only intead of left part
                    elseif dx<rightDim(1)
                        tc.Details(rightIndex).Dimensions=abs([dx rightDim(2:end)]);
                        tc.Details(rightIndex).FileName=tcExtension.FileName;
                        tc.Details(rightIndex).MoveToOrigin=tcExtension.MoveToOrigin;
                        tc.Details(rightIndex).Relocate=Solid.translation('x',xSpan(2)-tcDetails(rightIndex).Dimensions(1)/2);
                        tcDetails(rightIndex).OriginalSize=tcExtension.OriginalSize;

                    end % case where dx == rightDim(1) does not need to be define since it is the
                    % default case


                end
                
                
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                % Step 2    : Determine upper palm details                %
                % Relevant Variables:                                     %
                %           - palmDetails                                 %
                %           - gaps
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                
                % creating palmDetails
                palmDetails=tcDetails;                
                index=length(palmDetails);
                
                % Determining Dimensions of thumb compartment
                tc_Dim=[xSpan(2)-xSpan(1) tcDetails(1).Dimensions(2:3)];
                
                % Determining Width of thumb compartment
                zMin=tcDetails(1).Dimensions(3);
                
                % Determining zOffsets
                zOffset=getDefault_zOffset(fingers);
                
                % determining zSpan
                zSpan=2*zOffset;
                zSpan(zSpan<zMin)=zMin;
                
                
                
                % Allocating space for finger support dimensions
                fs_Dim=zeros(3,length(fingers));

                
                % allocating space for finger support center 
                fs_XYZ=zeros(3,length(fingers));

                % initializing gap structure
                gap=[];
                d=1;
                % initializing thumb compartment filling structure array
                tcfDetails=[];
                e = 1;
                
                % initializing array for template points
                p=zeros(8,3);
                
                % initializing array for vertices
                v=zeros(36,3);
                % initializing nodes
                nodes=zeros(4,4,length(fingers)+1);
                for n=1:length(fingers);
                    
                    % Determining dimensions and center locationof finger Support
                    if n==1
                        
                        fs_Dim(1,n)=fingers(n).Size(3)/2+xOffset(1)-xSpan(1);
                        fs_XYZ(1,n)=xSpan(1)+fs_Dim(1,n)/2;
                    
                    elseif n==length(fingers)
                        fs_Dim(1,n)=fingers(n).Size(3)/2 + xSpan(end)-xOffset(end);
                        fs_XYZ(1,n)=xSpan(end)-fs_Dim(1,n)/2;
                    else
                        
                        fs_Dim(1,n)=fingers(n).Size(3);
                        fs_XYZ(1,n)=xOffset(n);
                    end
                    
                    fs_Dim(2,n)=-yOffset(n)-fingers(n).Phalanges(1).Dimensions(1)-tc_Dim(2)/2;
                    fs_Dim(3,n)=zSpan(n);
                    
                    fs_XYZ(2,n)=yOffset(n)+fingers(n).Phalanges(1).Dimensions(1)+fs_Dim(2,n)/2;
                    fs_XYZ(3,n)=0;
                    
                    
                    
                    
                    palmDetails(index+n).Dimensions=fs_Dim(:,n)';
                    palmDetails(index+n).FileName=fsDefaults.FileName;
                    palmDetails(index+n).MoveToOrigin=fsDefaults.MoveToOrigin;
                    palmDetails(index+n).Relocate=Solid.translation('xyz',fs_XYZ(:,n)');
                    palmDetails(index+n).OriginalSize=fsDefaults.OriginalSize;
                    
                    % constructing thumb compartment filling if needed
                    if fs_Dim(3,n)>tc_Dim(3)
                        
                        tcfDetails(e).FileName=fsDefaults.FileName;
                        tcfDetails(e).Dimensions=[fs_Dim(1,n) tc_Dim(2) fs_Dim(3,n)-tc_Dim(3)];                        
                        tcfDetails(e).MoveToOrigin=fsDefaults.MoveToOrigin;
                        tcfDetails(e).Relocate=Solid.translation('xyz',[fs_XYZ(1,n) 0 tc_Dim(3)]);
                        tcfDetails(e).OriginalSize=fsDefaults.OriginalSize;
                        e=e+1;
                    end
                    
                    % constructing gap if needed
                                            %p1x           ~=             %p2x
                    if n>1 && (fs_XYZ(1,n-1)+fs_Dim(1,n-1)/2)~=(fs_XYZ(1,n)-fs_Dim(1,n)/2)
                        
                        
                        % building template points
                        p(1,1)=fs_XYZ(1,n-1)+fs_Dim(1,n-1)/2; %p1x
                        p(1,2)=fs_XYZ(2,n-1)+fs_Dim(2,n-1)/2; %p1y
                        p(1,3)=0;                             %p1z
                        
                        p(2,1)=fs_XYZ(1,n)-fs_Dim(1,n)/2;     %p2x
                        p(2,2)=fs_XYZ(2,n)+fs_Dim(2,n)/2;     %p2y
                        p(2,3)=0;                             %p2z
                        
                        p(3,1)=fs_XYZ(1,n)-fs_Dim(1,n)/2;          %p3x
                        p(3,2)=fs_XYZ(2,n)-fs_Dim(2,n)/2-(1/5)*... 
                            fingers(n).Phalanges(1).Dimensions(1); %p3y
                        p(3,3)=0;                                  %p3z
                        
                        p(4,1)=fs_XYZ(1,n-1)+fs_Dim(1,n-1)/2;      %p4x
                        p(4,2)=fs_XYZ(2,n-1)-fs_Dim(2,n-1)/2-(1/5)*... 
                            fingers(n-1).Phalanges(1).Dimensions(1);%p4y
                        p(4,3)=0;
                        
                        p(5,1)=p(4,1);
                        p(5,2)=p(4,2);
                        p(5,3)=fs_Dim(3,n-1);
                        
                        p(6,1)=p(3,1);
                        p(6,2)=p(3,2);
                        p(6,3)=fs_Dim(3,n);
                        
                        p(7,1)=p(2,1);
                        p(7,2)=p(2,2);
                        p(7,3)=fs_Dim(3,n);
                        
                        p(8,1)=p(1,1);
                        p(8,2)=p(1,2);
                        p(8,3)=fs_Dim(3,n-1);
                        
                        
                        
                        % assigning vertices
                        
                        % face 1
                        v(1,:)=p(3,:);v(2,:)=p(6,:);v(3,:)=p(2,:);v(4,:)=p(2,:);
                        v(5,:)=p(6,:);v(6,:)=p(7,:);
                        
                        
                        % face 2
                        v(7,:)=p(3,:);v(8,:)=p(4,:);v(9,:)=p(2,:);v(10,:)=p(2,:);
                        v(11,:)=p(4,:);v(12,:)=p(1,:);
                        
                        
                        % face 3
                        v(13,:)=p(1,:);v(14,:)=p(4,:);v(15,:)=p(5,:);v(16,:)=p(1,:);
                        v(17,:)=p(5,:);v(18,:)=p(8,:);
                        
                        
                        % face 4
                        v(19,:)=p(8,:);v(20,:)=p(5,:);v(21,:)=p(6,:);v(22,:)=p(8,:);
                        v(23,:)=p(6,:);v(24,:)=p(7,:);
                        
                        
                        % face 5
                        v(25,:)=p(3,:);v(26,:)=p(6,:);v(27,:)=p(5,:);v(28,:)=p(3,:);
                        v(29,:)=p(5,:);v(30,:)=p(4,:);
                        
                        
                        % face 6
                        v(31,:)=p(1,:);v(32,:)=p(8,:);v(33,:)=p(7,:);v(34,:)=p(1,:);
                        v(35,:)=p(7,:);v(36,:)=p(2,:);
                        
                        gap(d).Vertices=v;
                        gap(d).Faces=[1     2     3
                            4     5     6
                            7     8     9
                            10    11    12
                            13    14    15
                            16    17    18
                            19    20    21
                            22    23    24
                            25    26    27
                            28    29    30
                            31    32    33
                            34    35    36];
                        
                        %[1 2 3;3 4 1;3 4 5;5 6 3;5 6 7;7 8 5;...
                         %   1 2 7;7 8 1;1 4 5;5 8 1;2 3 6;6 7 2];
                        d=d+1;
                    end
                    
                    
                        
                      % determining nodes
                      nodes(:,:,n)=Solid.translation('xyz',[xOffset(n) yOffset(n) zOffset(n)]);
                                        
                    
                end
                
                % adding node for thumb
                nodes(:,:,end)=Solid.rotation('x',pi/2);

                % adding tcfDetails to palmDetails                
                palmDetails(length(palmDetails)+1:length(palmDetails)+length(tcfDetails))...
                    =tcfDetails;
                
                template.PalmDetails=palmDetails;
                template.Gaps=gap;
                template.Nodes=nodes;
                template.Style=style;
                template.Color=color;
                
                
                
                
                
            elseif isa(varargin{3},'char') 
                
                % fixed styles
                
                scale=varargin{1};
                type=varargin{2};
                style=varargin{3};
                
                                % Constructing directory path
                dirPath=Toolkit.createToolkitPath('Palm',style,type,'PalmDetails');
                %dirPath=['Palm\' style '\' type '\PalmDetails'];
                
                
                
                % loading template
                try
                    s=load(dirPath,'template');
                catch
                    error(['This combination of type and style has not been defined yet'])
                end
                
                
                
                % assingning template properties
                template.Type=type;
                template.Style=style;
                
                nodes=s.template.Nodes;
                
%                 % resizing nodes
%                 for n=1:size(nodes,3);
%                     nodes(1:3,4,n)=scale*nodes(1:3,4,n);
%                 end
                
                template.Nodes=nodes;
                
                template.Color=s.template.Color;
                
                template.PalmDetails.FileDirectory=s.template.FileDirectory;
                template.PalmDetails.DefaultDimensions=s.template.DefaultDimensions;
                template.PalmDetails.Relocate=s.template.AdjustmentFrame;
                template.PalmDetails.Dimensions=scale*s.template.DefaultDimensions;
                template.PalmDetails.ReductionRatio=s.template.ReductionRatio;
                
                                
            end
            
            
            






        end
    end
    
    
    methods (Static)
    
        function addTemplate(ptype,style)
            
            % ADDTEMPLATE
            %
            %   addTemplate(ptype,style)
            %       Static function of the PalmTemplate class that creates a
            %       structure file containing the details of construction
            %       of a Palm object.  It propmts the user for
            %       information to be entered, the information is then
            %       stored.  The MAT file is saved in the same directory
            %       where the STL file for the corresponding file exist.
            %       
            %       ptype: 
            %           String array containing the name of Palm type
            %
            %       style:
            %           String array containing the name of style.
            %          

       
            

            % creating directory name
            dirPath=Toolkit.createToolkitPath('Palm',style,ptype);
            %dirPath=['Palm\' style '\' ptype];



%             % verifying that path exists
%             if ~isdir(dirPath)
% 
%                 % make directory if it doesn't exist
%                 mkdir(dirPath)
% 
%             end



            %%%%%%%%%%%%%%% Prompt user for palm specifics %%%%%%%%%
            
            fprintf('\n----------- Palm Details Specification File Creation ----------\n\n')
            fprintf(['\t\tThe following prompts will query for information which will be stored\n '...
                '\t\tand utilized in the construction of Phalanx objects that match the specified\n'...
                '\t\tcharacteristics.\tA total of 8 steps must be completed in order to ensure\n'...
                '\t\tsuccessful creation of the Phalanx definition file.\n\n'])
            
            
            while(true)
                % prompt user for default palm default dimensions
                fprintf('\n\n\t- Step 1: Default Dimensions\n\t\t')
                fprintf('Enter palm default dimensions as a 1 x 3 vector [length height width]:\n\t');
                arg=input('Entry:');

                if isa(arg,'char')
                    template.DefaultDimensions=evalin('base',arg);
                elseif isa(arg,'num')
                    template.DefaultDimensions=arg;
                end



                % propmt user for palm Nodes
                fprintf('\n\n\t- Step 2: Nodes\n\t\t')
                fprintf(['Enter 4 x 4 x n tranformation matrix array indicating the relative\n\t\t'...
                    'position and orientation of each finger with respect to the base\n\t\t'...
                    'if a variable in the workspace contains this data then enter the\n\\t\t'...
                    'the variable name as a string\n\t']);
                arg=input('Entry:');
                if isa(arg,'char')
                    template.Nodes=evalin('base',arg);
                elseif isa(arg,'num')
                    template.Nodes=arg;
                end



                % prompt user for adjustment frame
                fprintf('\n\n\t- Step 3: Adjustment Frame\n\t\t')
                fprintf('Enter adjustment matrix. If it''s not required enter eye(4):\n\t');
                arg=input('Entry:');
                if isa(arg,'char')
                    template.AdjustmentFrame=evalin('base',arg);
                elseif isa(arg,'numeric')
                    template.AdjustmentFrame=arg;
                end


                % promt user for color ( enter as string array)
                fprintf('\n\n\t- Step 4: Color\n\t\t')
                fprintf('Enter color string or a 1 x 3 vector corresponding to rbg intensities:\n\t');
                arg=input('Entry:');
                if isa(arg,'char')
                    try
                        template.Color=evalin('base',arg);
                    catch
                        template.Color=arg;
                    end
                elseif isa(arg,'numeric')
                    template.Color=arg;
                end

                % promt user for reduction ratio for patch reduction
                fprintf('\n\n\t- Step 6: Reduction Ratio\n\t\t')
                fprintf(['Enter numeric value that''s in the range of <0,1> to be used in\n\t\t'...
                    'calculating the percentage of patch reduction\n\t\t(enter " 0 " is no reduction is to be performed):\n\t']);
                arg=input('Entry:');
                if isa(arg,'char')
                    template.ReductionRatio=evalin('base',arg);
                elseif isa(arg,'numeric')
                    template.ReductionRatio=arg;
                end

                % prompt user for file name
                fprintf('\n\n\t- Step 7: Graphical File Selection ( STL File)\n\t\t')
                %             fprintf('Enter "1" to load file or pressed enter to skip\n\t')
                %             selection=input('Entry:');
                %             if selection==1
                fprintf('\n\t\tSelect STL file that corresponds with the Palm definition using the provided UI\n')
                [filename,filenamePath]=uigetfile({'*stl' '*STL'},'Select STL file');
                template.FileDirectory=[dirPath '\' filename(1:end-4)];
                
                % Displaying the entries
                fprintf('\n\n\t- Step 8: Confirmation \n\t\t')
                fprintf('The following data has been entered for the configuration file\n\t\t')
                fprintf('Type:\t%s\n\t\tStyle:\t%s\n',ptype,style)
                fprintf('\n\t\t1 - Palm Default Dimensions:\n\t\t\t%1.2f\t%1.2f\t%1.2f',template.DefaultDimensions)
                
                fprintf('\n\n\t\t2 - Nodes:\n')
                for n=1:size(template.Nodes,3);
                    fprintf('\n\t\t\t%s',['Node' num2str(n)])
                    fprintf('\n\t\t\t\t%1.2f\t%1.2f\t%1.2f\t%1.2f',template.Nodes(:,:,n)')
                end
                
                fprintf('\n\n\t\t3 - Adjustment Frame:\n\n')
                fprintf('\t\t\t\t%1.2f\t%1.2f\t%1.2f\t%1.2f\n',template.AdjustmentFrame')
                
                
                fprintf('\n\n\t\t4 - Color:\n\n')
                if isa(template.Color,'numeric')
                    fprintf('\t\t\t\t%1.2f\t%1.2f\t%1.2f',template.Color')
                else
                    fprintf('\t\t\t\t%s',template.Color)
                end
                
                
                fprintf('\n\n\t\t5 - Reduction Ratio:\n\t\t')
                fprintf('\t\t%1.2f',template.ReductionRatio)
                
                
                fprintf('\n\n\t\t6 - File Directory:\n\t\t')
                fprintf('\t\t%s',[template.FileDirectory '.stl'])
                
                fprintf('\n\n\t\tSave Configuration file?:\n\t\t\t1 - %s\n\t\t\t2 - %s\n\t\t\t3 - %s\n\t\t','save','reenter data',...
                    'quit without saving')
                s=input('Entry: ');
                
                switch s
                    case 1
                        break;
                    case 2;
                        continue;
                    case 3
                        fprintf('\n\t\tConfiguration file was not saved\n')
                        return;
                end                
                

            end
            
            
            
            % verifying that path exists
            if ~isdir(dirPath)

                % make directory if it doesn't exist
                mkdir(dirPath)

            end
            
            
            % copy STL file to phalanx directory folder
            if copyfile([filenamePath filename],dirPath)
                fprintf('\n\n\t\tFile was successfully copied')
            else
                fprintf('\n\n\t\tFile could not be copied')
            end 
            
            
%             else
%                     fprintf('\n\n\t\tFile was not copied')
%             end

            % saving structure
            save([dirPath '\PalmDetails'],'template')
            
            fprintf(['\n\n\tCreation of Specification File Finished\n'...
                '\t---------------------------------------\n\n'])
        end
    
    end

end


function tcDetails=getDefaultThumbCompartment(thumb,style)

    % Determining FileName
    filePath=['Palm\Template' num2str(style) '\'];

    % determining size ratio
    tBase=thumb.Phalanges(1);

    ratio=tBase.Dimensions./tBase.DefaultDimensions;


    % creating structure

    tcDetails=struct('FileName','tcMiddle','Dimensions',[],'MoveToOrigin',[],'Relocate',[],...
        'OriginalSize',[0 0 0]);



    % defining middle part details
    tcDetails(1).FileName=[filePath 'tcMiddle'];
    tcDetails(1).Dimensions=[8*ratio(3) 12*ratio(2) 6*ratio(1)];
    tcDetails(1).OriginalSize=[8 12 6];
    tcDetails(1).MoveToOrigin=eye(4);
    tcDetails(1).Relocate=eye(4);

    % defining left side details
    tcDetails(2).Dimensions=[3*ratio(3) 12*ratio(2) 6*ratio(1)];
    tcDetails(2).OriginalSize=[3 12 6];
    tcDetails(2).MoveToOrigin=Solid.translation('x',5.5);
    tcDetails(2).Relocate=Solid.translation('x',-5.5*ratio(3));
    tcDetails(2).FileName=[filePath 'tcLeft'];

    % defining right part details
    tcDetails(3).Dimensions=[3*ratio(3) 12*ratio(2) 6*ratio(1)];
    tcDetails(3).OriginalSize=[3 12 6];
    tcDetails(3).MoveToOrigin=Solid.translation('x',-5.5);
    tcDetails(3).Relocate=Solid.translation('x',5.5*ratio(3));
    tcDetails(3).FileName=[filePath 'tcRight'];
end

function zOffset=getDefault_zOffset(fingers)

    zOffset=zeros(length(fingers));
    
    for n=1:length(fingers);


        zOffset(n)=fingers(n).Size(2)/2;


    end
    
end



    
